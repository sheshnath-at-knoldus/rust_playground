
use pnet::datalink::{self, NetworkInterface};
use pnet::datalink::Channel;

fn main() {
    // Get a list of available network interfaces
    let interfaces = datalink::interfaces();

    // Choose a specific network interface (replace "eth0" with the name of your interface)
    let interface = interfaces
        .into_iter()
        .find(|iface| iface.name == "enp2s0")
        .expect("Network interface not found");

    // Open a data link channel for the selected interface
    let (mut sender, mut receiver) = match datalink::channel(&interface, Default::default()) {
        Ok(Channel::Ethernet(tx, rx)) => (tx, rx),
        Err(err) => {
            eprintln!("Error opening datalink channel: {}", err);
            std::process::exit(1);
        }
        _ => {
            eprintln!("Unsupported channel type");
            std::process::exit(1);
        }
    };

    println!("Capturing packets on interface: {}", interface.name);

    // Main packet capture loop
    loop {
        match receiver.next() {
            Ok(packet) => {
                // Process and analyze the captured packet here
                println!("Received a packet: {:?}", packet);
            }
            Err(err) => {
                eprintln!("Error capturing packet: {}", err);
            }
        }
    }
}






use pnet::datalink::{self, NetworkInterface};
use pnet::datalink::Channel;
use pnet::packet::{ethernet::EthernetPacket, ip::IpNextHeaderProtocols, ipv4::Ipv4Packet, udp::UdpPacket, tcp::TcpPacket, Packet};

fn main() {
    // Get a list of available network interfaces
    let interfaces = datalink::interfaces();

    // Choose a specific network interface (replace "eth0" with the name of your interface)
    let interface = interfaces
        .into_iter()
        .find(|iface| iface.name == "enp2s0")
        .expect("Network interface not found");

    // Open a data link channel for the selected interface
    let (mut sender, mut receiver) = match datalink::channel(&interface, Default::default()) {
        Ok(Channel::Ethernet(tx, rx)) => (tx, rx),
        Err(err) => {
            eprintln!("Error opening datalink channel: {}", err);
            std::process::exit(1);
        }
        _ => {
            eprintln!("Unsupported channel type");
            std::process::exit(1);
        }
    };

    println!("Capturing packets on interface: {}", interface.name);

    // Main packet capture loop
    loop {
        match receiver.next() {
            Ok(packet) => {
                // Parse and print common fields of the captured packet
                if let Some(eth) = EthernetPacket::new(&packet) {
                    if eth.get_ethertype() == pnet::packet::ethernet::EtherTypes::Ipv4 {
                        if let Some(ipv4) = Ipv4Packet::new(eth.payload()) {
                            let protocol = ipv4.get_next_level_protocol();
                            match protocol {
                                IpNextHeaderProtocols::Tcp => {
                                    if let Some(tcp) = TcpPacket::new(ipv4.payload()) {
                                        let payload = tcp.payload();
                                        println!("Received TCP packet from {} to {}: {} bytes",
                                                 ipv4.get_source(),
                                                 ipv4.get_destination(),
                                                 tcp.get_data_offset() as u32);
                                        println!("Payload: {:?}", payload);
                                    }
                                }
                                IpNextHeaderProtocols::Udp => {
                                    if let Some(udp) = UdpPacket::new(ipv4.payload()) {
                                        let payload = udp.payload();
                                        println!("Received UDP packet from {} to {}: {} bytes",
                                                 ipv4.get_source(),
                                                 ipv4.get_destination(),
                                                 udp.get_length() as u32);
                                        println!("Payload: {:?}", payload);
                                    }
                                }
                                _ => {
                                    println!("Received IPv4 packet with unknown protocol: {:?}", protocol);
                                }
                            }
                        }
                    }
                }
            }
            Err(err) => {
                eprintln!("Error capturing packet: {}", err);
            }
        }
    }
}



use pnet::datalink::{self, DataLinkReceiver};
use pnet::packet::ethernet::{EtherTypes, Ethernet, MutableEthernetPacket};
use pnet::packet::{MutablePacket, Packet};
use pnet::util::MacAddr;
use pnet::datalink::Channel::Ethernet as DataLinkEthernet;
use std::io;

fn main() -> Result<(), io::Error> {
    let interfaces = datalink::interfaces();
    let interface = interfaces
        .into_iter()
        .find(|iface| iface.name == "enp2s0")
        .expect("Network interface not found");

    println!("interface name: {:?}", interface);

    let (_sender, mut receiver) = match datalink::channel(&interface, Default::default()) {
        Ok(DataLinkEthernet(_tx, rx)) => (_tx, rx),
        _ => {
            eprintln!("Failed to open datalink channel");
            return Err(io::Error::new(io::ErrorKind::Other, "Failed to open datalink channel"));
        }
    };

    println!("Listening for incoming packets on interface: {}", interface.name);

    loop {
        match receiver.next() {
            Ok(packet) => {
                // Process and analyze the captured packet here
                println!("Received a packet: {:?}", packet);
            }
            Err(err) => {
                eprintln!("Error capturing packet: {}", err);
            }
        }
    }

    // Note: To send data as well, you can use the sender (commented as /* sender */)
    // to send data, you'll need a separate function or thread.
}


